#summary Adding the ALA theme to a new project

= `ala-web-theme` Grails plugin =

The `ala-web-theme` Grails plugin provides the following features to a Grails app:

  * a default Sitemesh layout with ALA header & footer (including CSS, JS and images resources)
  * a default index page for the webapp
  * CAS support for auth.ala.org.au integration (including libs and web.xml additions)

----

To get started, create a blank Grails app (substituting in your new project name):

{{{
grails createApp TestApp
}}}

 * cd to !TestApp
 * Edit `grails-app/conf/BuildConfig.groovy`
 * Add to the repositories sections

{{{ 
    repositories { 
    ...
        mavenRepo "http://maven.ala.org.au/repository/"  
    ...
}
}}}

 * Add the plugin as runtime e.g. (check the latest version via [http://maven.ala.org.au/repository/org/grails/plugins/ala-web-theme/ maven repo])

{{{
    plugins {
        ...
        runtime ":ala-web-theme:0.1.11"  
    }
}}}

== CAS ==


* For CAS config heres an example block to add to the top of Config.groovy. Note the checks for properties allow setting using external config.

{{{

security.cas.casServerName = 'https://auth.ala.org.au'
security.cas.uriFilterPattern = '/,/testAuth.*,/query/.*,/admin/.*,/admin/user/.*,/admin/user/debug/.*,/admin/debug/all,/notification/myAlerts,/notification/changeFrequency,/notification/addMyAlert,/notification/addMyAlert/.*,/notification/deleteMyAlert/.*,/notification/deleteMyAlert/.*,/notification/deleteMyAlertWR/.*,/webservice/.*,/webservice/createTaxonAlert,/webservice/taxonAlerts,/webservice/createRegionAlert,/webservice/regionAlerts,/webservice/deleteTaxonAlert/.*,/webservice/create*,/webservice/createSpeciesGroupRegionAlert,/ws/.*,/ws/createTaxonAlert,/ws/taxonAlerts,/ws/createRegionAlert,/ws/regionAlerts,/ws/deleteTaxonAlert/.*,/ws/createTaxonRegionAlert,/ws/createSpeciesGroupRegionAlert,/admin/runChecksNow'
security.cas.uriExclusionFilterPattern = '/images.*,/css.*,/js.*,/less.*'
security.cas.authenticateOnlyIfLoggedInPattern = "" // pattern for pages that can optionally display info about the logged-in user
security.cas.loginUrl = 'https://auth.ala.org.au/cas/login'
security.cas.logoutUrl = 'https://auth.ala.org.au/cas/logout'
security.cas.casServerUrlPrefix = 'https://auth.ala.org.au/cas'
security.cas.bypass = false

appContext = 'ala-postie'
headerAndFooter.baseURL = 'http://www2.ala.org.au/commonui'
ala.baseURL = "http://www.ala.org.au"
bie.baseURL = "http://bie.ala.org.au"
bie.searchPath = "/search"
grails.project.groupId = "au.org.ala" // change this to alter the default package name and Maven publishing destination
ala.userDetailsURL = 'http://auth.ala.org.au/userdetails/userDetails/getUserListFull'

}}}


 * Run the app via the built-in tomcat:

{{{
grails run-app
}}} 




and as the Grails output suggests, browse to http://localhost:8080/testApp.

Check http://maven.ala.org.au/repository/org/grails/plugins/ala-web-theme/ for the latest version of this plugin.